"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.glob = exports.CACHE = void 0;
const fs = __importStar(require("fs"));
const globrex_1 = __importDefault(require("./globrex"));
const globalyzer_1 = __importDefault(require("./globalyzer"));
const path_1 = require("path");
const common_1 = require("./common");
exports.CACHE = {};
function walk(output, prefix, lexer, opts, dirname = '', level = 0) {
    const rgx = lexer.segments[level];
    const dir = (0, path_1.resolve)(opts.cwd, prefix, dirname);
    let files = [];
    try {
        fs.readdirSync(dir);
    }
    catch (e) { }
    const { dot, filesOnly } = opts;
    for (const file of files) {
        const fullpath = (0, path_1.join)(dir, file);
        const relpath = dirname ? (0, path_1.join)(dirname, file) : file;
        if (!dot && common_1.isHidden.test(relpath))
            continue;
        const isMatch = lexer.regex.test(relpath);
        let isDir = exports.CACHE[relpath];
        if (isDir === undefined) {
            try {
                exports.CACHE[relpath] = isDir = fs.lstatSync(fullpath).isDirectory();
            }
            catch (e) {
                // no access
                isDir = false;
            }
            exports.CACHE[relpath] = isDir;
        }
        if (!isDir) {
            isMatch && output.push((0, path_1.relative)(opts.cwd, fullpath));
            continue;
        }
        if (rgx && !rgx.test(file))
            continue;
        !filesOnly && isMatch && output.push((0, path_1.join)(prefix, relpath));
        if (rgx && rgx.toString() !== lexer.globstar)
            walk(output, prefix, lexer, opts, relpath, level + 1);
        // walk(output, prefix, lexer, opts, relpath, rgx && rgx.toString() !== lexer.globstar && level + 1);
    }
}
/**
 * Find files using bash-like globbing.
 * All paths are normalized compared to node-glob.
 * @param str Glob string
 * @returns array containing matching files
 */
function glob(str, opts = {}) {
    if (!str)
        return [];
    let glob = (0, globalyzer_1.default)(str);
    opts.cwd = opts.cwd || '.';
    const opts2 = opts;
    if (!glob.isGlob) {
        try {
            let resolved = (0, path_1.resolve)(opts2.cwd, str);
            let dirent = fs.statSync(resolved);
            if (opts2.filesOnly && !dirent.isFile())
                return [];
            return opts2.absolute ? [resolved] : [str];
        }
        catch (err) {
            const e = err;
            if (e.code != 'ENOENT')
                throw err;
            return [];
        }
    }
    if (opts2.flush)
        exports.CACHE = {};
    let matches = [];
    const { path } = (0, globrex_1.default)(glob.glob, { filepath: true, globstar: true, extended: true });
    if (!path)
        return [];
    path.globstar = path.globstar.toString();
    walk(matches, glob.base, path, opts2, '.', 0);
    if (opts2.absolute)
        matches = matches.map(x => (0, path_1.resolve)(opts2.cwd, x));
    return matches;
}
exports.glob = glob;
;
exports.default = glob;
