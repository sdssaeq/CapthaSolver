import * as fs from 'fs';
import globrex from './globrex';
import globalyzer from './globalyzer';
import { join, resolve, relative } from 'path';
import { isHidden } from './common';
export let CACHE = {};
async function walk(output, prefix, lexer, opts, dirname = '', level = 0) {
    const rgx = lexer.segments[level];
    const dir = resolve(opts.cwd, prefix, dirname);
    let files = [];
    try {
        files = await fs.promises.readdir(dir);
    }
    catch (_e) { }
    const { dot, filesOnly } = opts;
    for (const file of files) {
        const fullpath = join(dir, file);
        const relpath = dirname ? join(dirname, file) : file;
        if (!dot && isHidden.test(relpath))
            continue;
        const isMatch = lexer.regex.test(relpath);
        let isDir = CACHE[relpath];
        if (isDir === undefined) {
            try {
                isDir = (await fs.promises.lstat(fullpath)).isDirectory();
            }
            catch (e) {
                // no access
                isDir = false;
            }
            CACHE[relpath] = isDir;
        }
        if (!isDir) {
            isMatch && output.push(relative(opts.cwd, fullpath));
            continue;
        }
        if (rgx && !rgx.test(file))
            continue;
        if (!filesOnly && isMatch)
            output.push(join(prefix, relpath));
        if (rgx && rgx.toString() !== lexer.globstar)
            await walk(output, prefix, lexer, opts, relpath, level + 1);
        // await walk(output, prefix, lexer, opts, relpath, rgx && rgx.toString() !== lexer.globstar && level + 1);
    }
}
/**
 * Find files using bash-like globbing.
 * All paths are normalized compared to node-glob.
 * @param str Glob string
 * @returns array containing matching files
 */
export async function glob(str, opts = {}) {
    if (!str)
        return [];
    const glob = globalyzer(str);
    opts.cwd = opts.cwd || '.';
    const opts2 = opts;
    if (!glob.isGlob) {
        try {
            const resolved = resolve(opts.cwd, str);
            const dirent = await fs.promises.stat(resolved);
            if (opts2.filesOnly && !dirent.isFile())
                return [];
            return opts2.absolute ? [resolved] : [str];
        }
        catch (err) {
            const e = err;
            if (e.code != 'ENOENT')
                throw err;
            return [];
        }
    }
    if (opts2.flush)
        CACHE = {};
    let matches = [];
    const { path } = globrex(glob.glob, { filepath: true, globstar: true, extended: true });
    if (!path)
        return [];
    const globstar = path.globstar;
    // console.log({ path });
    path.globstar = globstar.toString();
    await walk(matches, glob.base, path, opts2, '.', 0);
    if (opts2.absolute)
        matches = matches.map(x => resolve(opts2.cwd, x));
    return matches;
}
;
export default glob;
